"""
Collaborative Agent System
Agents work together in a pipeline for comprehensive threat assessment
"""

from typing import Dict, Any
from .triage_agent import TriageAgent
from .analysis_agent import AnalysisAgent


class CollaborativeAgentSystem:
    """
    Multi-stage agent pipeline where agents work together:
    1. Triage agent assesses severity and containment
    2. Analysis agent provides deep investigation (if severity warrants it)
    """
    
    def __init__(self, llm):
        self.triage_agent = TriageAgent(llm=llm)
        self.analysis_agent = AnalysisAgent(llm=llm)
        self.llm = llm
    
    def assess(self, threat: str, context: str = "") -> Dict[str, Any]:
        """
        Run collaborative assessment
        
        Returns combined output from both agents
        """
        
        # Stage 1: Triage
        triage_result = self.triage_agent.process(threat, context)
        triage_output = triage_result['output']
        severity = triage_result.get('severity', 'Medium')
        
        # Stage 2: Analysis (always run for comprehensive assessment)
        analysis_result = self.analysis_agent.process(threat, context)
        analysis_output = analysis_result['output']
        
        # Combine outputs
        combined_output = self._combine_outputs(triage_output, analysis_output, severity)
        
        return {
            'agent': 'Collaborative Agents (Triage + Analysis)',
            'output': combined_output,
            'triage_output': triage_output,
            'analysis_output': analysis_output,
            'severity': severity,
            'agent_type': 'collaborative'
        }
    
    def _combine_outputs(self, triage: str, analysis: str, severity: str) -> str:
        """Combine outputs from both agents into cohesive assessment"""
        
        combined = f"""# Threat Assessment Report

## Executive Summary
{self._extract_severity_section(triage)}

## Immediate Response (Triage)
{self._extract_containment_section(triage)}

## Detailed Analysis
{self._extract_analysis_section(analysis)}

## Recovery & Prevention
{self._extract_recovery_section(analysis)}
{self._extract_prevention_section(analysis)}

---
Assessment generated by collaborative agent system (Triage + Analysis)
"""
        return combined.strip()
    
    def _extract_severity_section(self, triage_output: str) -> str:
        """Extract severity and reasoning from triage"""
        lines = []
        in_section = False
        
        for line in triage_output.split('\n'):
            line_lower = line.lower().strip()
            if 'severity' in line_lower:
                in_section = True
                lines.append(line)
            elif in_section and ('immediate' in line_lower or 'escalate' in line_lower):
                break
            elif in_section:
                lines.append(line)
        
        return '\n'.join(lines) if lines else "Severity assessment in progress..."
    
    def _extract_containment_section(self, triage_output: str) -> str:
        """Extract containment actions from triage"""
        lines = []
        in_section = False
        
        for line in triage_output.split('\n'):
            line_lower = line.lower().strip()
            if 'immediate' in line_lower or 'containment' in line_lower:
                in_section = True
                lines.append(line)
            elif in_section and ('escalate' in line_lower or 'reasoning' in line_lower):
                # Also capture escalation
                if 'escalate' in line_lower:
                    lines.append(line)
                break
            elif in_section:
                lines.append(line)
        
        return '\n'.join(lines) if lines else "Containment recommendations pending..."
    
    def _extract_analysis_section(self, analysis_output: str) -> str:
        """Extract threat analysis from analysis agent"""
        lines = []
        in_section = False
        
        for line in analysis_output.split('\n'):
            line_lower = line.lower().strip()
            if 'threat analysis' in line_lower or 'indicators of compromise' in line_lower:
                in_section = True
                lines.append(line)
            elif in_section and ('recovery' in line_lower or 'prevention' in line_lower):
                break
            elif in_section:
                lines.append(line)
        
        return '\n'.join(lines) if lines else analysis_output.split('\n\n')[0]
    
    def _extract_recovery_section(self, analysis_output: str) -> str:
        """Extract recovery steps from analysis"""
        lines = []
        in_section = False
        
        for line in analysis_output.split('\n'):
            line_lower = line.lower().strip()
            if 'recovery' in line_lower:
                in_section = True
                lines.append(line)
            elif in_section and 'prevention' in line_lower:
                break
            elif in_section:
                lines.append(line)
        
        return '\n'.join(lines) if lines else "Recovery steps to be determined..."
    
    def _extract_prevention_section(self, analysis_output: str) -> str:
        """Extract prevention measures from analysis"""
        lines = []
        in_section = False
        
        for line in analysis_output.split('\n'):
            line_lower = line.lower().strip()
            if 'prevention' in line_lower or 'preventive' in line_lower:
                in_section = True
                lines.append(line)
            elif in_section:
                lines.append(line)
        
        return '\n'.join(lines) if lines else "Prevention measures to be determined..."


if __name__ == "__main__":
    """Test collaborative agents"""
    print("Collaborative Agent System Test\n")
    print("="*60)
    
    # Without LLM, will use fallback methods
    collab_system = CollaborativeAgentSystem(llm=None)
    
    test_threat = "Ransomware detected encrypting files on file server"
    test_context = "Production environment, 50 workstations affected"
    
    result = collab_system.assess(test_threat, test_context)
    
    print(f"Agent: {result['agent']}")
    print(f"Severity: {result['severity']}")
    print("\n" + "="*60)
    print("Combined Output:")
    print("="*60)
    print(result['output'])
    print("\n" + "="*60)
    print("\nThis demonstrates how Triage + Analysis work together")
    print("In production, the LLM would generate detailed, contextual responses")

